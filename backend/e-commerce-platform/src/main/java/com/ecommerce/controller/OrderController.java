package com.ecommerce.controller;

import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyRequestEvent;
import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyResponseEvent;
import com.ecommerce.model.Order;
import com.ecommerce.model.request.OrderRequest;
import com.ecommerce.model.response.OrderResponse;
import com.ecommerce.service.OrderService;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrderController {
    private static final Logger logger = LoggerFactory.getLogger(OrderController.class);
    private final OrderService orderService;
    private final ObjectMapper objectMapper;
    
    public OrderController() {
        this.orderService = new OrderService();
        this.objectMapper = new ObjectMapper();
    }
    
    public APIGatewayProxyResponseEvent handleRequest(APIGatewayProxyRequestEvent request, Context context) {
        try {
            String path = request.getPath();
            String httpMethod = request.getHttpMethod();
            
            logger.info("OrderController: {} {}", httpMethod, path);
            
            if ("POST".equals(httpMethod) && "/api/orders/place".equals(path)) {
                return placeOrder(request);
            } else if ("GET".equals(httpMethod) && path.startsWith("/api/orders/get/")) {
                String orderIdStr = path.substring("/api/orders/get/".length());
                Integer orderID = Integer.parseInt(orderIdStr);
                return getOrderById(orderID);
            } else if ("GET".equals(httpMethod) && "/api/orders/getAll".equals(path)) {
                return getAllOrders();
            }
            
            return createErrorResponse(404, "Endpoint not found");
            
        } catch (Exception e) {
            logger.error("Error in OrderController", e);
            return createErrorResponse(500, "Internal server error");
        }
    }
    
    private APIGatewayProxyResponseEvent placeOrder(APIGatewayProxyRequestEvent request) {
        try {
            String requestBody = request.getBody();
            if (requestBody == null || requestBody.trim().isEmpty()) {
                return createErrorResponse(400, "Request body is required");
            }
            
            OrderRequest orderRequest = objectMapper.readValue(requestBody, OrderRequest.class);
            
            if (orderRequest.getCartItems() == null || orderRequest.getCartItems().isEmpty()) {
                return createErrorResponse(400, "Cart items are required");
            }
            
            OrderResponse response = orderService.placeOrder(orderRequest.getCartItems());        
            OrderResponse[] responseArray = {response};
            String responseBody = objectMapper.writeValueAsString(responseArray);
            
            if (response.getCode() == 0) {
                return createSuccessResponse(200, responseBody);
            } else {
                return createErrorResponse(400, responseBody);
            }
            
        } catch (Exception e) {
            logger.error("Error placing order", e);
            return createErrorResponse(500, "Error placing order");
        }
    }
    
    private APIGatewayProxyResponseEvent getOrderById(Integer orderID) {
        try {
            Order order = orderService.getOrderById(orderID);
            
            if (order == null) {
                return createErrorResponse(404, "Order not found");
            }
            
            String responseBody = objectMapper.writeValueAsString(order);
            return createSuccessResponse(200, responseBody);
            
        } catch (Exception e) {
            logger.error("Error retrieving order by ID: " + orderID, e);
            return createErrorResponse(500, "Error retrieving order");
        }
    }
    
    private APIGatewayProxyResponseEvent getAllOrders() {
        try {
            List<Order> orders = orderService.getAllOrders();
            String responseBody = objectMapper.writeValueAsString(orders);
            
            return createSuccessResponse(200, responseBody);
        } catch (Exception e) {
            logger.error("Error retrieving all orders", e);
            return createErrorResponse(500, "Error retrieving orders");
        }
    }
    
    // Generated by AI
    private APIGatewayProxyResponseEvent createSuccessResponse(int statusCode, String body) {
        Map<String, String> headers = new HashMap<>();
        headers.put("Content-Type", "application/json");
        headers.put("Access-Control-Allow-Origin", "*");
        headers.put("Access-Control-Allow-Headers", "Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token");
        headers.put("Access-Control-Allow-Methods", "GET,POST,PUT,DELETE,OPTIONS");
        
        return new APIGatewayProxyResponseEvent()
                .withStatusCode(statusCode)
                .withHeaders(headers)
                .withBody(body);
    }
    
    // Generated by AI
    private APIGatewayProxyResponseEvent createErrorResponse(int statusCode, String message) {
        Map<String, String> headers = new HashMap<>();
        headers.put("Content-Type", "application/json");
        headers.put("Access-Control-Allow-Origin", "*");
        headers.put("Access-Control-Allow-Headers", "Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token");
        headers.put("Access-Control-Allow-Methods", "GET,POST,PUT,DELETE,OPTIONS");
        
        Map<String, String> errorResponse = new HashMap<>();
        errorResponse.put("error", message);
        
        try {
            String body = objectMapper.writeValueAsString(errorResponse);
            return new APIGatewayProxyResponseEvent()
                    .withStatusCode(statusCode)
                    .withHeaders(headers)
                    .withBody(body);
        } catch (Exception e) {
            return new APIGatewayProxyResponseEvent()
                    .withStatusCode(statusCode)
                    .withHeaders(headers)
                    .withBody("{\"error\":\"" + message + "\"}");
        }
    }
} 