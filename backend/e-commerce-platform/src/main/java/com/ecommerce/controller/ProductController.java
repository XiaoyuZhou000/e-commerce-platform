package com.ecommerce.controller;

import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyRequestEvent;
import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyResponseEvent;
import com.ecommerce.model.Product;
import com.ecommerce.model.request.ProductRequest;
import com.ecommerce.service.ProductService;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProductController {
    private static final Logger logger = LoggerFactory.getLogger(ProductController.class);
    private final ProductService productService;
    private final ObjectMapper objectMapper;
    
    public ProductController() {
        this.productService = new ProductService();
        this.objectMapper = new ObjectMapper();
    }
    
    public APIGatewayProxyResponseEvent handleRequest(APIGatewayProxyRequestEvent request, Context context) {
        try {
            String path = request.getPath();
            String httpMethod = request.getHttpMethod();
            
            logger.info("ProductController: {} {}", httpMethod, path);
            
            if ("GET".equals(httpMethod)) {
                if ("/api/products".equals(path)) {
                    return getAllProducts();
                } else if (path.startsWith("/api/product/")) {
                    String productIdStr = path.substring("/api/product/".length());
                    Integer productID = Integer.parseInt(productIdStr);
                    return getProductById(productID);
                }
            }
            
            return createErrorResponse(404, "Endpoint not found");
            
        } catch (Exception e) {
            logger.error("Error in ProductController", e);
            return createErrorResponse(500, "Internal server error");
        }
    }
    
    private APIGatewayProxyResponseEvent getAllProducts() {
        try {
            List<Product> products = productService.getAllProducts();
            String responseBody = objectMapper.writeValueAsString(products);
            
            return createSuccessResponse(200, responseBody);
        } catch (Exception e) {
            logger.error("Error retrieving all products", e);
            return createErrorResponse(500, "Error retrieving products");
        }
    }
    
    private APIGatewayProxyResponseEvent getProductById(Integer productID) {
        try {
            Product product = productService.getProductById(productID);
            
            if (product == null) {
                return createErrorResponse(404, "Product not found");
            }
            
            String responseBody = objectMapper.writeValueAsString(product);
            return createSuccessResponse(200, responseBody);
            
        } catch (Exception e) {
            logger.error("Error retrieving product by ID: " + productID, e);
            return createErrorResponse(500, "Error retrieving product");
        }
    }
    
    // Generated by AI
    private APIGatewayProxyResponseEvent createSuccessResponse(int statusCode, String body) {
        Map<String, String> headers = new HashMap<>();
        headers.put("Content-Type", "application/json");
        headers.put("Access-Control-Allow-Origin", "*");
        headers.put("Access-Control-Allow-Headers", "Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token");
        headers.put("Access-Control-Allow-Methods", "GET,POST,PUT,DELETE,OPTIONS");
        
        return new APIGatewayProxyResponseEvent()
                .withStatusCode(statusCode)
                .withHeaders(headers)
                .withBody(body);
    }
    
    // Generated by AI
    private APIGatewayProxyResponseEvent createErrorResponse(int statusCode, String message) {
        Map<String, String> headers = new HashMap<>();
        headers.put("Content-Type", "application/json");
        headers.put("Access-Control-Allow-Origin", "*");
        headers.put("Access-Control-Allow-Headers", "Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token");
        headers.put("Access-Control-Allow-Methods", "GET,POST,PUT,DELETE,OPTIONS");
        
        Map<String, String> errorResponse = new HashMap<>();
        errorResponse.put("error", message);
        
        try {
            String body = objectMapper.writeValueAsString(errorResponse);
            return new APIGatewayProxyResponseEvent()
                    .withStatusCode(statusCode)
                    .withHeaders(headers)
                    .withBody(body);
        } catch (Exception e) {
            return new APIGatewayProxyResponseEvent()
                    .withStatusCode(statusCode)
                    .withHeaders(headers)
                    .withBody("{\"error\":\"" + message + "\"}");
        }
    }
} 